generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Existing models
model Validation {
  id                  String              @id
  replicaSubmissionId String              @unique
  testCases           Json
  sensayValidation    Json
  openaiValidation    Json
  averageScores       Json
  finalVerdict        String
  comment             String
  createdAt           DateTime            @default(now())
  replica_submissions replica_submissions @relation(fields: [replicaSubmissionId], references: [id])
}

model replica_submissions {
  id                 String      @id
  name               String
  description        String
  replicaApiEndpoint String
  createdAt          DateTime    @default(now())
  updatedAt          DateTime
  status             String
  Validation         Validation?
}

// New models for storing Sensay API settings

// Model for storing API settings
model ApiSettings {
  id                String        @id @default(cuid())
  name              String        @unique // Settings set name
  apiKey            String        // API key
  organizationId    String        // Organization ID
  userId            String        // User ID
  replicaUuid       String        // Replica UUID
  isActive          Boolean       @default(true) // Active settings flag
  createdAt         DateTime      @default(now()) // Creation date
  updatedAt         DateTime      @updatedAt // Update date
  
  chatSessions      ChatSession[] // Chat sessions relation
  replicas          Replica[]     // Replicas relation
  
  @@map("api_settings")
}

// Model for storing chat sessions
model ChatSession {
  id                String        @id @default(cuid())
  apiSettingsId     String        // Used API settings ID
  messages          ChatMessage[] // Chat messages
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  apiSettings       ApiSettings   @relation(fields: [apiSettingsId], references: [id])
  
  @@map("chat_sessions")
}

// Model for storing chat messages
model ChatMessage {
  id                String        @id @default(cuid())
  sessionId         String        // Chat session ID
  role              String        // Role (user or assistant)
  content           String        // Message content
  timestamp         DateTime      @default(now())
  
  session           ChatSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@map("chat_messages")
}

// Model for storing Sensay replicas
model Replica {
  id                String        @id // Replica UUID from Sensay API
  name              String        // Replica name
  description       String        // Replica description
  apiSettingsId     String        // Used API settings ID
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  apiSettings       ApiSettings   @relation(fields: [apiSettingsId], references: [id])
  
  @@map("replicas")
}
