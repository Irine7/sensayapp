'use client';

import React, {
	createContext,
	useContext,
	useState,
	useEffect,
	ReactNode,
} from 'react';
import { useChat } from './chat-provider';
import { extractChatTrigger } from '@/app/lib/utils/parseTrigger';

interface Person {
	id: string;
	name: string;
	role: string;
	company: string;
	description: string;
	location?: string;
	expertise?: string[];
	matchPercentage?: number;
}

interface PeopleFromChat {
	category: string;
	query: string;
	people: Person[];
	timestamp: number;
}

interface PeopleContextType {
	peopleFromChat: PeopleFromChat | null;
	setPeopleFromChat: (people: PeopleFromChat | null) => void;
	clearPeopleFromChat: () => void;
}

const PeopleContext = createContext<PeopleContextType | undefined>(undefined);

export function PeopleProvider({ children }: { children: ReactNode }) {
	const [peopleFromChat, setPeopleFromChat] = useState<PeopleFromChat | null>(
		null
	);
	const { messages } = useChat();

	// –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ª—é–¥–µ–π
	const clearPeopleFromChat = () => {
		setPeopleFromChat(null);
	};

	// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–≤ –ª—é–¥–µ–π
	useEffect(() => {
		if (!messages.length) return;

		// –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
		const lastAssistantMessage = [...messages]
			.reverse()
			.find((msg) => msg.role === 'assistant');

		if (!lastAssistantMessage) return;

		const trigger = extractChatTrigger(lastAssistantMessage.content);

		// –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä showPeopleList, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
		if (trigger && trigger.action === 'showPeopleList') {
			const people = extractPeopleFromMessage(lastAssistantMessage.content);
			console.log('üîç Extracted people from trigger:', people);

			if (people.length > 0) {
				setPeopleFromChat({
					category: trigger.payload.category,
					query: trigger.payload.query,
					people,
					timestamp: lastAssistantMessage.timestamp,
				});
			}
		} else {
			// –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ª—é–¥–µ–π –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			const people = extractPeopleFromMessage(lastAssistantMessage.content);
			console.log('üîç Extracted people from message:', people);

			if (people.length > 0) {
				setPeopleFromChat({
					category: 'general',
					query: '–ò–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–ø–ª–∏–∫–∏',
					people,
					timestamp: lastAssistantMessage.timestamp,
				});
			}
		}
	}, [messages]);

	return (
		<PeopleContext.Provider
			value={{
				peopleFromChat,
				setPeopleFromChat,
				clearPeopleFromChat,
			}}
		>
			{children}
		</PeopleContext.Provider>
	);
}

export function usePeopleFromChat() {
	const context = useContext(PeopleContext);
	if (context === undefined) {
		throw new Error('usePeopleFromChat must be used within a PeopleProvider');
	}
	return context;
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–ø–ª–∏–∫–∏
 * –ò—â–µ—Ç –∏–º–µ–Ω–∞ –ª—é–¥–µ–π –≤ —Ç–µ–∫—Å—Ç–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã Person
 */
function extractPeopleFromMessage(messageContent: string): Person[] {
	console.log(
		'üîç Extracting people from message:',
		messageContent.substring(0, 200) + '...'
	);
	const people: Person[] = [];

	// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω –ª—é–¥–µ–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
	const namePatterns = [
		// –ò–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–ò–º—è –§–∞–º–∏–ª–∏—è** (–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç)
		/\*\*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)\*\*/gm,
		// –ò–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–ò–º—è –§–∞–º–∏–ª–∏—è* (–∫—É—Ä—Å–∏–≤)
		/\*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)\*/gm,
		// –ü—Ä–æ—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ (—Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏–º–µ–Ω–∞)
		/(?:^|\n)[\s]*[-‚Ä¢*]\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)/gm,
		// –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
		/(?:^|\n)[\s]*\d+\.\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)/gm,
		// –ò–º–µ–Ω–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
		/"([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)"/gm,
		// –ò–º–µ–Ω–∞ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è
		/:\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)/gm,
		// –ò–º–µ–Ω–∞ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏
		/(?:^|\n)\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)/gm,
		// –ò–º–µ–Ω–∞ –ø–æ—Å–ª–µ "–í–æ—Ç" –∏–ª–∏ "Here"
		/(?:–í–æ—Ç|Here|–≤–æ—Ç|here)[^:]*:\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)/gm,
		// –ò–º–µ–Ω–∞ –≤ –ø—Ä–æ—Å—Ç—ã—Ö —Å–ø–∏—Å–∫–∞—Ö –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤
		/(?:^|\n)\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)\s*[‚Äì-]/gm,
		// –ò–º–µ–Ω–∞ –ø–æ—Å–ª–µ "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã" –∏–ª–∏ "Experts"
		/(?:–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã|Experts|—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã|experts)[^:]*:\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)/gm,
		// –ò–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1. –ò–º—è –§–∞–º–∏–ª–∏—è - –æ–ø–∏—Å–∞–Ω–∏–µ"
		/(?:^|\n)\s*\d+\.\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)\s*[‚Äì-]/gm,
		// –ò–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "‚Ä¢ –ò–º—è –§–∞–º–∏–ª–∏—è: –æ–ø–∏—Å–∞–Ω–∏–µ"
		/(?:^|\n)\s*[‚Ä¢*]\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)\s*:/gm,
		// –ò–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ò–º—è –§–∞–º–∏–ª–∏—è (—Ä–æ–ª—å)"
		/(?:^|\n)\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)\s*\(/gm,
		// –ò–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ò–º—è –§–∞–º–∏–ª–∏—è ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ"
		/(?:^|\n)\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)\s*‚Äî/gm,
		// –ò–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ò–º—è –§–∞–º–∏–ª–∏—è, —Ä–æ–ª—å"
		/(?:^|\n)\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)\s*,/gm,
	];

	const foundNames = new Set<string>();

	// –ò—â–µ–º –∏–º–µ–Ω–∞ –ø–æ –≤—Å–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
	namePatterns.forEach((pattern, index) => {
		let match;
		while ((match = pattern.exec(messageContent)) !== null) {
			const fullName = match[1].trim();
			console.log(`üîç Pattern ${index + 1} matched:`, fullName);
			// –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞ –∏ –æ–±—â–∏–µ —Å–ª–æ–≤–∞
			console.log(`üîç Checking name: "${fullName}"`);
			console.log(`   - Length: ${fullName.length}`);
			console.log(`   - Already found: ${foundNames.has(fullName)}`);
			console.log(`   - Is common word: ${isCommonWord(fullName)}`);

			if (
				fullName &&
				fullName.length > 3 &&
				!foundNames.has(fullName) &&
				!isCommonWord(fullName)
			) {
				foundNames.add(fullName);
				console.log('‚úÖ Found name:', fullName);

				// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Person
				const person: Person = {
					id: `person-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
					name: fullName,
					role: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç',
					company: '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
					description: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–µ',
				};

				// –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
				const nameIndex = messageContent.indexOf(fullName);
				const contextStart = Math.max(0, nameIndex - 300);
				const contextEnd = Math.min(messageContent.length, nameIndex + 300);
				const context = messageContent.substring(contextStart, contextEnd);

				// –ò—â–µ–º —Ä–æ–ª—å/–¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
				const rolePatterns = [
					// –§–æ—Ä–º–∞—Ç: "**–ò–º—è –§–∞–º–∏–ª–∏—è** - —Ä–æ–ª—å"
					/\*\*[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\*\*\s*[‚Äì-]\s*([^,\n]+)/,
					// –§–æ—Ä–º–∞—Ç: "**–ò–º—è –§–∞–º–∏–ª–∏—è**: —Ä–æ–ª—å"
					/\*\*[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\*\*\s*:\s*([^,\n]+)/,
					// –§–æ—Ä–º–∞—Ç: "–ò–º—è –§–∞–º–∏–ª–∏—è - —Ä–æ–ª—å"
					/(?:^|\n)[\s]*[-‚Ä¢*]?\s*[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s*[‚Äì-]\s*([^,\n]+)/,
					// –§–æ—Ä–º–∞—Ç: "–ò–º—è –§–∞–º–∏–ª–∏—è: —Ä–æ–ª—å"
					/(?:^|\n)[\s]*[-‚Ä¢*]?\s*[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s*:\s*([^,\n]+)/,
					// –§–æ—Ä–º–∞—Ç: "–ò–º—è –§–∞–º–∏–ª–∏—è (—Ä–æ–ª—å)"
					/(?:^|\n)[\s]*[-‚Ä¢*]?\s*[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s*\(\s*([^)]+)\s*\)/,
					// –§–æ—Ä–º–∞—Ç: "–ò–º—è –§–∞–º–∏–ª–∏—è, —Ä–æ–ª—å"
					/(?:^|\n)[\s]*[-‚Ä¢*]?\s*[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s*,\s*([^,\n]+)/,
				];

				for (const rolePattern of rolePatterns) {
					const roleMatch = context.match(rolePattern);
					if (roleMatch) {
						person.role = roleMatch[1].trim();
						break;
					}
				}

				// –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏—é –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
				const companyPatterns = [
					// –§–æ—Ä–º–∞—Ç: "–≤ –∫–æ–º–ø–∞–Ω–∏–∏", "at company", "—Ä–∞–±–æ—Ç–∞–µ—Ç –≤"
					/(?:–≤|at|@|—Ä–∞–±–æ—Ç–∞–µ—Ç –≤|works at|–∫–æ–º–ø–∞–Ω–∏—è|company)\s+([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z\s]+(?:Inc|LLC|Corp|Ltd|–û–û–û|–ê–û|–ó–ê–û|Group|Capital|Ventures|Google|Microsoft|Apple|Meta|Amazon|–Ø–Ω–¥–µ–∫—Å|Mail\.ru|VK)?)/i,
					// –§–æ—Ä–º–∞—Ç: "–∫–æ–º–ø–∞–Ω–∏—è: –Ω–∞–∑–≤–∞–Ω–∏–µ"
					/(?:–∫–æ–º–ø–∞–Ω–∏—è|company):\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z\s]+)/i,
					// –§–æ—Ä–º–∞—Ç: "–≤ Google", "–≤ Microsoft"
					/(?:–≤|at)\s+([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)/i,
				];

				for (const companyPattern of companyPatterns) {
					const companyMatch = context.match(companyPattern);
					if (companyMatch) {
						person.company = companyMatch[1].trim();
						break;
					}
				}

				// –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
				const descriptionPatterns = [
					// –§–æ—Ä–º–∞—Ç: "‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ"
					/[‚Äî‚Äì-]\s*([^,\n]+(?:[^,\n]*[^,\n])?)/,
					// –§–æ—Ä–º–∞—Ç: ": –æ–ø–∏—Å–∞–Ω–∏–µ"
					/:\s*([^,\n]+(?:[^,\n]*[^,\n])?)/,
					// –§–æ—Ä–º–∞—Ç: "(–æ–ø–∏—Å–∞–Ω–∏–µ)"
					/\(\s*([^)]+)\s*\)/,
					// –§–æ—Ä–º–∞—Ç: ", –æ–ø–∏—Å–∞–Ω–∏–µ"
					/,\s*([^,\n]+(?:[^,\n]*[^,\n])?)/,
				];

				for (const descPattern of descriptionPatterns) {
					const descriptionMatch = context.match(descPattern);
					if (
						descriptionMatch &&
						descriptionMatch[1] !== person.role &&
						descriptionMatch[1].length > 10 &&
						!descriptionMatch[1].includes('–≤ ') &&
						!descriptionMatch[1].includes('at ')
					) {
						person.description = descriptionMatch[1].trim();
						break;
					}
				}

				// –ò—â–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É/–Ω–∞–≤—ã–∫–∏
				const expertisePatterns = [
					/(?:—ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞|expertise|–Ω–∞–≤—ã–∫–∏|skills|—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è|specialization):\s*([^,\n]+)/i,
					/(?:–æ–±–ª–∞—Å—Ç—å|area|—Ñ–æ–∫—É—Å|focus):\s*([^,\n]+)/i,
				];

				for (const expPattern of expertisePatterns) {
					const expMatch = context.match(expPattern);
					if (expMatch) {
						person.expertise = expMatch[1].split(/[,;]/).map((s) => s.trim());
						break;
					}
				}

				// –ò—â–µ–º –ª–æ–∫–∞—Ü–∏—é
				const locationPatterns = [
					/(?:—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ|location|–≥–æ—Ä–æ–¥|city|–∏–∑|from):\s*([^,\n]+)/i,
					/(?:–∏–∑|from)\s+([^,\n]+)/i,
					/(?:–ú–æ—Å–∫–≤–∞|–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥|–ö–∞–∑–∞–Ω—å|–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫|–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥|–ú–æ—Å–∫–≤–∞|–°–ü–±|–ú–°–ö|–°–ü–±)/i,
				];

				for (const locPattern of locationPatterns) {
					const locMatch = context.match(locPattern);
					if (locMatch) {
						person.location = locMatch[1].trim();
						break;
					}
				}

				people.push(person);
			}
		}
	});

	console.log('üéØ Final extracted people:', people);
	return people;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –æ–±—â–∏–º —Å–ª–æ–≤–æ–º, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–º–µ–Ω–µ–º
 */
function isCommonWord(str: string): boolean {
	const commonWords = [
		'–í–æ—Ç',
		'–≤–æ—Ç',
		'Here',
		'here',
		'–°–ø–∏—Å–æ–∫',
		'—Å–ø–∏—Å–æ–∫',
		'List',
		'list',
		'–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã',
		'—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã',
		'Experts',
		'experts',
		'–õ—é–¥–∏',
		'–ª—é–¥–∏',
		'People',
		'people',
		'–†–µ–∫–æ–º–µ–Ω–¥—É—é',
		'—Ä–µ–∫–æ–º–µ–Ω–¥—É—é',
		'Recommend',
		'recommend',
		'–ú–æ–≥—É',
		'–º–æ–≥—É',
		'Can',
		'can',
		'–ü—Ä–µ–¥–ª–∞–≥–∞—é',
		'–ø—Ä–µ–¥–ª–∞–≥–∞—é',
		'Suggest',
		'suggest',
		'–ù–∞–π–¥–µ–Ω–Ω—ã–µ',
		'–Ω–∞–π–¥–µ–Ω–Ω—ã–µ',
		'Found',
		'found',
		'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã',
		'—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
		'Results',
		'results',
		'–ü–æ–∏—Å–∫',
		'–ø–æ–∏—Å–∫',
		'Search',
		'search',
		'–ù–∞–π–¥–µ–Ω–æ',
		'–Ω–∞–π–¥–µ–Ω–æ',
		'Found',
		'found',
		'–°–æ–≤–µ—Ç—É—é',
		'—Å–æ–≤–µ—Ç—É—é',
		'Advise',
		'advise',
		'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
		'—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
		'Recommendations',
		'recommendations',
		'–ú–æ–∂–µ—Ç–µ',
		'–º–æ–∂–µ—Ç–µ',
		'You can',
		'you can',
		'–°–≤—è–∂–∏—Ç–µ—Å—å',
		'—Å–≤—è–∂–∏—Ç–µ—Å—å',
		'Contact',
		'contact',
		'–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å',
		'–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å',
		'Reach out',
		'reach out',
	];
	return commonWords.includes(str);
}
