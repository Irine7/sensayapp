'use client';

import React, {
	createContext,
	useContext,
	useState,
	useEffect,
	ReactNode,
} from 'react';
import { useChat } from './chat-provider';
import { extractChatTrigger } from '@/app/lib/utils/parseTrigger';

interface Person {
	id: string;
	name: string;
	role: string;
	company: string;
	description: string;
	location?: string;
	expertise?: string[];
	matchPercentage?: number;
	isBestMatch?: boolean;
}

interface PeopleFromChat {
	category: string;
	query: string;
	people: Person[];
	timestamp: number;
}

interface PeopleContextType {
	peopleFromChat: PeopleFromChat | null;
	setPeopleFromChat: (people: PeopleFromChat | null) => void;
	clearPeopleFromChat: () => void;
}

const PeopleContext = createContext<PeopleContextType | undefined>(undefined);

export function PeopleProvider({ children }: { children: ReactNode }) {
	const [peopleFromChat, setPeopleFromChat] = useState<PeopleFromChat | null>(
		null
	);
	const { messages } = useChat();

	// Clear people list
	const clearPeopleFromChat = () => {
		setPeopleFromChat(null);
	};

	// Track messages to extract people lists
	useEffect(() => {
		if (!messages.length) return;

		// –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
		const lastAssistantMessage = [...messages]
			.reverse()
			.find((msg) => msg.role === 'assistant');

		if (!lastAssistantMessage) return;

		const trigger = extractChatTrigger(lastAssistantMessage.content);

		// –ï—Å–ª–∏ –µ—Å—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä showPeopleList, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
		if (trigger && trigger.action === 'showPeopleList') {
			const people = extractPeopleFromMessage(lastAssistantMessage.content);
			console.log('üîç Extracted people from trigger:', people);

			if (people.length > 0) {
				// –†–∞–Ω–∂–∏—Ä—É–µ–º –ª—é–¥–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				const rankedPeople = rankPeopleByMatch(people, trigger.payload.query);
				console.log('üîç Ranked people:', rankedPeople);

				setPeopleFromChat({
					category: trigger.payload.category,
					query: trigger.payload.query,
					people: rankedPeople,
					timestamp: lastAssistantMessage.timestamp,
				});
			}
		} else {
			// –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ª—é–¥–µ–π –∏–∑ –æ–±—ã—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			const people = extractPeopleFromMessage(lastAssistantMessage.content);
			console.log('üîç Extracted people from message:', people);

			if (people.length > 0) {
				// –†–∞–Ω–∂–∏—Ä—É–µ–º –ª—é–¥–µ–π –ø–æ –æ–±—â–µ–º—É –∑–∞–ø—Ä–æ—Å—É
				const rankedPeople = rankPeopleByMatch(people, 'From replica message');
				console.log('üîç Ranked people:', rankedPeople);

				setPeopleFromChat({
					category: 'general',
					query: 'From replica message',
					people: rankedPeople,
					timestamp: lastAssistantMessage.timestamp,
				});
			}
		}
	}, [messages]);

	return (
		<PeopleContext.Provider
			value={{
				peopleFromChat,
				setPeopleFromChat,
				clearPeopleFromChat,
			}}
		>
			{children}
		</PeopleContext.Provider>
	);
}

export function usePeopleFromChat() {
	const context = useContext(PeopleContext);
	if (context === undefined) {
		throw new Error('usePeopleFromChat must be used within a PeopleProvider');
	}
	return context;
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Ñ–∏–ª–µ–º —á–µ–ª–æ–≤–µ–∫–∞
 */
function calculateMatchPercentage(userQuery: string, person: Person): number {
	if (!userQuery) return 0; // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—É—Å—Ç–æ–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0%
	const query = userQuery.toLowerCase();
	const queryWords = query.split(/\s+/).filter((word) => word.length > 2);

	let score = 0;
	let maxScore = 100;

	// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –∏ —Å–æ–≤–µ—Ç–Ω–∏–∫–æ–≤
	const investorKeywords = [
		'–∏–Ω–≤–µ—Å—Ç–æ—Ä',
		'investor',
		'angel',
		'–∞–Ω–≥–µ–ª',
		'vc',
		'venture',
		'capital',
		'—Ñ–æ–Ω–¥',
		'fund',
		'partner',
		'–ø–∞—Ä—Ç–Ω–µ—Ä',
	];
	const advisorKeywords = [
		'—Å–æ–≤–µ—Ç–Ω–∏–∫',
		'advisor',
		'mentor',
		'–º–µ–Ω—Ç–æ—Ä',
		'–∫–æ—É—á',
		'coach',
		'–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',
		'consultant',
		'expert',
		'—ç–∫—Å–ø–µ—Ä—Ç',
	];
	const aiKeywords = [
		'ai',
		'artificial intelligence',
		'–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
		'–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
		'machine learning',
		'startup',
		'—Å—Ç–∞—Ä—Ç–∞–ø',
		'tech',
		'—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏',
		'technology',
		'innovation',
		'–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏',
		'software',
		'—Å–æ—Ñ—Ç',
	];
	const stageKeywords = [
		'pre-seed',
		'seed',
		'series a',
		'series b',
		'early stage',
		'—Ä–∞–Ω–Ω—è—è —Å—Ç–∞–¥–∏—è',
		'–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–¥–∏—è',
		'early',
		'–Ω–∞—á–∞–ª—å–Ω–∞—è',
	];

	// –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–∞ –Ω–∞–ª–∏—á–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–ø–æ–≤—ã—à–∞–µ–º —Å 10 –¥–æ 25)
	if (person.role && person.role !== 'Specialist') {
		score += 25;
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–æ–ª–∏
	if (person.role) {
		const role = person.role.toLowerCase();

		// –ï—Å–ª–∏ –∏—â–µ–º –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ - –ø–æ–≤—ã—à–∞–µ–º –±–∞–ª–ª—ã
		if (investorKeywords.some((keyword) => query.includes(keyword))) {
			if (investorKeywords.some((keyword) => role.includes(keyword))) {
				score += 40; // –±—ã–ª–æ 30
			} else {
				// –î–∞–∂–µ –µ—Å–ª–∏ —Ä–æ–ª—å –Ω–µ —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å —Å–≤—è–∑—å —Å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º–∏
				if (
					role.includes('investment') ||
					role.includes('invest') ||
					role.includes('fund') ||
					role.includes('capital')
				) {
					score += 25;
				}
			}
		}

		// –ï—Å–ª–∏ –∏—â–µ–º —Å–æ–≤–µ—Ç–Ω–∏–∫–æ–≤ - –ø–æ–≤—ã—à–∞–µ–º –±–∞–ª–ª—ã
		if (advisorKeywords.some((keyword) => query.includes(keyword))) {
			if (advisorKeywords.some((keyword) => role.includes(keyword))) {
				score += 40; // –±—ã–ª–æ 30
			} else {
				// –î–∞–∂–µ –µ—Å–ª–∏ —Ä–æ–ª—å –Ω–µ —Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å —Å–≤—è–∑—å —Å –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
				if (
					role.includes('consult') ||
					role.includes('advise') ||
					role.includes('expert') ||
					role.includes('director')
				) {
					score += 25;
				}
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–±–ª–∞—Å—Ç–∏ (AI, tech, etc.) - –ø–æ–≤—ã—à–∞–µ–º –±–∞–ª–ª—ã
		if (aiKeywords.some((keyword) => query.includes(keyword))) {
			if (
				aiKeywords.some((keyword) => role.includes(keyword)) ||
				aiKeywords.some((keyword) =>
					person.description?.toLowerCase().includes(keyword)
				)
			) {
				score += 35; // –±—ã–ª–æ 25
			} else {
				// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ tech-—Ä–æ–ª–∏
				if (
					role.includes('tech') ||
					role.includes('software') ||
					role.includes('digital') ||
					role.includes('innovation')
				) {
					score += 20;
				}
			}
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–¥–∏—é –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
		if (stageKeywords.some((keyword) => query.includes(keyword))) {
			if (
				stageKeywords.some((keyword) => role.includes(keyword)) ||
				stageKeywords.some((keyword) =>
					person.description?.toLowerCase().includes(keyword)
				)
			) {
				score += 25; // –±—ã–ª–æ 20
			}
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è - –¥–µ–ª–∞–µ–º –±–æ–ª–µ–µ —â–µ–¥—Ä—ã–º
	if (person.description) {
		const description = person.description.toLowerCase();

		// –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ - –ø–æ–≤—ã—à–∞–µ–º –±–∞–ª–ª—ã
		let descriptionMatches = 0;
		queryWords.forEach((word) => {
			if (description.includes(word)) {
				descriptionMatches++;
				score += 8; // –±—ã–ª–æ 5
			}
		});

		// –ë–æ–Ω—É—Å –∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
		if (descriptionMatches >= 2) {
			score += 10;
		}

		// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–º–∞—Ç–∏–∫–µ - –ø–æ–≤—ã—à–∞–µ–º
		if (aiKeywords.some((keyword) => query.includes(keyword))) {
			if (aiKeywords.some((keyword) => description.includes(keyword))) {
				score += 25; // –±—ã–ª–æ 15
			}
		}

		// –ë–æ–Ω—É—Å –∑–∞ –¥–ª–∏–Ω–Ω–æ–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
		if (description.length > 50) {
			score += 5;
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É - –¥–µ–ª–∞–µ–º –±–æ–ª–µ–µ —â–µ–¥—Ä—ã–º
	if (person.expertise && person.expertise.length > 0) {
		let expertiseMatches = 0;
		person.expertise.forEach((skill) => {
			const skillLower = skill.toLowerCase();

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ AI/tech –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
			if (aiKeywords.some((keyword) => query.includes(keyword))) {
				if (aiKeywords.some((keyword) => skillLower.includes(keyword))) {
					expertiseMatches++;
					score += 15; // –±—ã–ª–æ 10
				}
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ª—é–±—ã–º —Å–ª–æ–≤–∞–º –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
			queryWords.forEach((word) => {
				if (skillLower.includes(word)) {
					expertiseMatches++;
					score += 8;
				}
			});
		});

		// –ë–æ–Ω—É—Å –∑–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–µ
		if (expertiseMatches >= 2) {
			score += 10;
		}
	}

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
	if (
		person.company &&
		person.company !== '' &&
		person.company !== 'Not specified'
	) {
		score += 5;
	}

	if (person.location) {
		score += 3;
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –Ω–æ –µ—Å—Ç—å –±–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –¥–∞–µ–º –º–∏–Ω–∏–º—É–º 20%
	if (score < 20 && (person.role || person.description)) {
		score = 20;
	}

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª
	return Math.min(score, maxScore);
}

/**
 * –†–∞–Ω–∂–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
 */
function rankPeopleByMatch(people: Person[], userQuery: string): Person[] {
	const peopleWithScores = people
		.map((person) => ({
			...person,
			matchPercentage: calculateMatchPercentage(userQuery, person),
		}))
		.sort((a, b) => (b.matchPercentage || 0) - (a.matchPercentage || 0));

	// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è—è –Ω–µ–±–æ–ª—å—à–∏–µ —Ä–∞–∑–ª–∏—á–∏—è
	const uniqueScores = new Set<number>();
	return peopleWithScores.map((person, index) => {
		let finalScore = person.matchPercentage || 0;

		// –ï—Å–ª–∏ —Ç–∞–∫–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–º–µ–Ω—å—à–∞–µ–º –µ–≥–æ –Ω–∞ –Ω–µ–±–æ–ª—å—à—É—é –≤–µ–ª–∏—á–∏–Ω—É
		while (uniqueScores.has(finalScore) && finalScore > 0) {
			finalScore -= 0.1; // –£–º–µ–Ω—å—à–∞–µ–º –Ω–∞ 0.1%
		}

		// –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
		finalScore = Math.round(finalScore * 10) / 10;

		uniqueScores.add(finalScore);

		return {
			...person,
			matchPercentage: finalScore,
			isBestMatch: index === 0,
		};
	});
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–ø–ª–∏–∫–∏
 * –ò—â–µ—Ç –∏–º–µ–Ω–∞ –ª—é–¥–µ–π –≤ —Ç–µ–∫—Å—Ç–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã Person
 */
function extractPeopleFromMessage(messageContent: string): Person[] {
	console.log(
		'üîç Extracting people from message:',
		messageContent.substring(0, 200) + '...'
	);
	console.log('üîç Full message length:', messageContent.length);

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –∏–º—è —Å –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–º
	const apostropheMatch = messageContent.match(/–î–∂–µ–π–º—Å[^–∞-—è—ë]*–û[^–∞-—è—ë]*–ö–æ–Ω–Ω–æ—Ä/);
	if (apostropheMatch) {
		console.log('üîç Found "–î–∂–µ–π–º—Å –û\'–ö–æ–Ω–Ω–æ—Ä" variant:', apostropheMatch[0]);
		console.log(
			'üîç Character codes:',
			Array.from(apostropheMatch[0]).map((c) => c.charCodeAt(0))
		);
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
	const simpleTest = messageContent.match(/\*\*([^*]+)\*\*/g);
	console.log('üîç Simple bold text test:', simpleTest);
	const people: Person[] = [];

	// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω –ª—é–¥–µ–π –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
	const namePatterns = [
		// –ò–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ **–ò–º—è –§–∞–º–∏–ª–∏—è** (–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç) - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
		/\*\*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*)\*\*/gm,
		// –ò–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ *–ò–º—è –§–∞–º–∏–ª–∏—è* (–∫—É—Ä—Å–∏–≤) - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
		/\*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*)\*/gm,
		// –ü—Ä–æ—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏ (—Ä—É—Å—Å–∫–∏–µ –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –∏–º–µ–Ω–∞) - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –∏ –¥–µ—Ñ–∏—Å—ã
		/(?:^|\n)[\s]*[-‚Ä¢*]\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*)/gm,
		// –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –∏ –¥–µ—Ñ–∏—Å—ã
		/(?:^|\n)[\s]*\d+\.\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*)/gm,
		// –ò–º–µ–Ω–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –∏ –¥–µ—Ñ–∏—Å—ã
		/"([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*)"/gm,
		// –ò–º–µ–Ω–∞ –ø–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –∏ –¥–µ—Ñ–∏—Å—ã
		/:\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*)/gm,
		// –ò–º–µ–Ω–∞ –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –∏ –¥–µ—Ñ–∏—Å—ã
		/(?:^|\n)\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*)/gm,
		// –ò–º–µ–Ω–∞ –ø–æ—Å–ª–µ "–í–æ—Ç" –∏–ª–∏ "Here" - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –∏ –¥–µ—Ñ–∏—Å—ã
		/(?:–í–æ—Ç|Here|–≤–æ—Ç|here)[^:]*:\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*)/gm,
		// –ò–º–µ–Ω–∞ –≤ –ø—Ä–æ—Å—Ç—ã—Ö —Å–ø–∏—Å–∫–∞—Ö –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤ - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –∏ –¥–µ—Ñ–∏—Å—ã
		/(?:^|\n)\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*)\s*[‚Äì-]/gm,
		// –ò–º–µ–Ω–∞ –ø–æ—Å–ª–µ "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã" –∏–ª–∏ "Experts" - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã –∏ –¥–µ—Ñ–∏—Å—ã
		/(?:–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã|Experts|—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã|experts)[^:]*:\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*)/gm,
		// –ò–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1. –ò–º—è –§–∞–º–∏–ª–∏—è - –æ–ø–∏—Å–∞–Ω–∏–µ" - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
		/(?:^|\n)\s*\d+\.\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*)\s*[‚Äì-]/gm,
		// –ò–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "‚Ä¢ –ò–º—è –§–∞–º–∏–ª–∏—è: –æ–ø–∏—Å–∞–Ω–∏–µ" - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
		/(?:^|\n)\s*[‚Ä¢*]\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*)\s*:/gm,
		// –ò–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ò–º—è –§–∞–º–∏–ª–∏—è (—Ä–æ–ª—å)" - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
		/(?:^|\n)\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*)\s*\(/gm,
		// –ò–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ò–º—è –§–∞–º–∏–ª–∏—è ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ" - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
		/(?:^|\n)\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*)\s*‚Äî/gm,
		// –ò–º–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ò–º—è –§–∞–º–∏–ª–∏—è, —Ä–æ–ª—å" - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
		/(?:^|\n)\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*)\s*,/gm,
		// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è "–í–æ—Ç –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã" - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∞–ø–æ—Å—Ç—Ä–æ—Ñ–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
		/(?:–í–æ—Ç –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã|Here are key contacts|–∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã|key contacts)[^:]*:\s*(?:^|\n)[\s]*\d+\.\s*\*\*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*)\*\*/gm,
		// –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ - –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π
		/\*\*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)*)\*\*/gm,
		// –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω - –ª—é–±–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ **
		/\*\*([^*]+)\*\*/gm,
	];

	const foundNames = new Set<string>();

	// –ò—â–µ–º –∏–º–µ–Ω–∞ –ø–æ –≤—Å–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
	namePatterns.forEach((pattern, index) => {
		let match;
		const patternName =
			[
				'**–ò–º—è –§–∞–º–∏–ª–∏—è** (–∂–∏—Ä–Ω—ã–π)',
				'*–ò–º—è –§–∞–º–∏–ª–∏—è* (–∫—É—Ä—Å–∏–≤)',
				'–°–ø–∏—Å–∫–∏ —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏',
				'–ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏',
				'–ò–º–µ–Ω–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö',
				'–ü–æ—Å–ª–µ –¥–≤–æ–µ—Ç–æ—á–∏—è',
				'–í –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏',
				'–ü–æ—Å–ª–µ "–í–æ—Ç" –∏–ª–∏ "Here"',
				'–ü—Ä–æ—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏ –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤',
				'–ü–æ—Å–ª–µ "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã" –∏–ª–∏ "Experts"',
				'–§–æ—Ä–º–∞—Ç "1. –ò–º—è –§–∞–º–∏–ª–∏—è - –æ–ø–∏—Å–∞–Ω–∏–µ"',
				'–§–æ—Ä–º–∞—Ç "‚Ä¢ –ò–º—è –§–∞–º–∏–ª–∏—è: –æ–ø–∏—Å–∞–Ω–∏–µ"',
				'–§–æ—Ä–º–∞—Ç "–ò–º—è –§–∞–º–∏–ª–∏—è (—Ä–æ–ª—å)"',
				'–§–æ—Ä–º–∞—Ç "–ò–º—è –§–∞–º–∏–ª–∏—è ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ"',
				'–§–æ—Ä–º–∞—Ç "–ò–º—è –§–∞–º–∏–ª–∏—è, —Ä–æ–ª—å"',
				'–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω "–í–æ—Ç –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã"',
				'–ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞',
				'–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω - –ª—é–±–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ **',
			][index] || `Pattern ${index + 1}`;

		console.log(`üîç Testing pattern ${index + 1}: ${patternName}`);

		// –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –¥–æ–±–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–ª–∞–¥–∫—É
		if (index === 0) {
			console.log('üîç First pattern regex:', pattern);
			console.log("üîç Looking for: **–î–∂–µ–π–º—Å –û'–ö–æ–Ω–Ω–æ—Ä**");
			const manualTest =
				/\*\*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*\s+[–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+(?:[''''-][–∞-—è—ëa-z]+)*)\*\*/gm;
			const manualMatch = manualTest.exec(messageContent);
			console.log('üîç Manual test result:', manualMatch);
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
		const testMatch = pattern.exec(messageContent);
		if (testMatch) {
			console.log(`‚úÖ Pattern ${index + 1} found match:`, testMatch[1]);
			// –°–±—Ä–∞—Å—ã–≤–∞–µ–º lastIndex –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
			pattern.lastIndex = 0;
		} else {
			console.log(`‚ùå Pattern ${index + 1} no matches`);
		}

		while ((match = pattern.exec(messageContent)) !== null) {
			if (!match[1]) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞—Ö–≤–∞—á–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
			let fullName = match[1].trim();

			// –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ (–ª—é–±–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ **) –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è
			if (index === namePatterns.length - 1) {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Å–ª–æ–≤–∞, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã
				const nameWords = fullName.split(/\s+/);
				const hasTwoCapitalizedWords =
					nameWords.length >= 2 &&
					nameWords.every((word) => /^[–ê-–Ø–ÅA-Z]/.test(word));

				if (!hasTwoCapitalizedWords) {
					continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è
				}
			}

			console.log(`üîç ${patternName} matched:`, fullName);
			// –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–º–µ–Ω–∞ –∏ –æ–±—â–∏–µ —Å–ª–æ–≤–∞
			console.log(`üîç Checking name: "${fullName}"`);
			console.log(`   - Length: ${fullName.length}`);
			console.log(`   - Already found: ${foundNames.has(fullName)}`);
			console.log(`   - Is common word: ${isCommonWord(fullName)}`);

			if (
				fullName &&
				fullName.length > 3 &&
				!foundNames.has(fullName) &&
				!isCommonWord(fullName)
			) {
				foundNames.add(fullName);
				console.log('‚úÖ Found name:', fullName);

				// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Person
				const person: Person = {
					id: `person-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
					name: fullName,
					role: 'Specialist',
					company: '',
					description: 'Specialist information',
				};

				// –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
				const nameIndex = messageContent.indexOf(fullName);
				const contextStart = Math.max(0, nameIndex - 300);
				const contextEnd = Math.min(messageContent.length, nameIndex + 300);
				const context = messageContent.substring(contextStart, contextEnd);

				// –ò—â–µ–º —Ä–æ–ª—å/–¥–æ–ª–∂–Ω–æ—Å—Ç—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
				const rolePatterns = [
					// –§–æ—Ä–º–∞—Ç: "**–ò–º—è –§–∞–º–∏–ª–∏—è** - —Ä–æ–ª—å" - –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
					new RegExp(
						`\\*\\*${fullName.replace(
							/[.*+?^${}()|[\]\\]/g,
							'\\$&'
						)}\\*\\*\\s*[‚Äì-]\\s*([^.,\n]+)`,
						'i'
					),
					// –§–æ—Ä–º–∞—Ç: "**–ò–º—è –§–∞–º–∏–ª–∏—è**: —Ä–æ–ª—å" - –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
					new RegExp(
						`\\*\\*${fullName.replace(
							/[.*+?^${}()|[\]\\]/g,
							'\\$&'
						)}\\*\\*\\s*:\\s*([^.,\n]+)`,
						'i'
					),
					// –§–æ—Ä–º–∞—Ç: "–ò–º—è –§–∞–º–∏–ª–∏—è - —Ä–æ–ª—å" - –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
					new RegExp(
						`${fullName.replace(
							/[.*+?^${}()|[\]\\]/g,
							'\\$&'
						)}\\s*[‚Äì-]\\s*([^.,\n]+)`,
						'i'
					),
					// –§–æ—Ä–º–∞—Ç: "–ò–º—è –§–∞–º–∏–ª–∏—è: —Ä–æ–ª—å" - –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
					new RegExp(
						`${fullName.replace(
							/[.*+?^${}()|[\]\\]/g,
							'\\$&'
						)}\\s*:\\s*([^.,\n]+)`,
						'i'
					),
				];

				for (const rolePattern of rolePatterns) {
					const roleMatch = context.match(rolePattern);
					if (roleMatch && roleMatch[1]) {
						let role = roleMatch[1].trim();
						console.log(`üîç Raw role extracted: "${role}"`);

						// –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ —Ä–æ–ª–∏
						role = role.replace(/\s*(based in|from|–≤|–∏–∑)\s+[^.,\n]*$/i, '');
						role = role.replace(/\s*\.\s*$/, '');
						role = role.replace(/\s*,\s*$/, '');

						console.log(`üîç Cleaned role: "${role}"`);

						// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–ª—å –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
						if (
							role.length > 0 &&
							role.length < 100 &&
							!role.toLowerCase().includes('based in') &&
							!role.toLowerCase().includes('from') &&
							!role.toLowerCase().includes('–≤ ') &&
							!role.toLowerCase().includes('–∏–∑ ')
						) {
							person.role = role;
							console.log(`‚úÖ Final role: "${role}"`);
							break;
						}
					}
				}

				// –ò—â–µ–º –∫–æ–º–ø–∞–Ω–∏—é –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
				const companyPatterns = [
					// –§–æ—Ä–º–∞—Ç: "–≤ –∫–æ–º–ø–∞–Ω–∏–∏", "at company", "—Ä–∞–±–æ—Ç–∞–µ—Ç –≤"
					/(?:–≤|at|@|—Ä–∞–±–æ—Ç–∞–µ—Ç –≤|works at|–∫–æ–º–ø–∞–Ω–∏—è|company)\s+([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z\s]+(?:Inc|LLC|Corp|Ltd|–û–û–û|–ê–û|–ó–ê–û|Group|Capital|Ventures|Google|Microsoft|Apple|Meta|Amazon|–Ø–Ω–¥–µ–∫—Å|Mail\.ru|VK)?)/i,
					// –§–æ—Ä–º–∞—Ç: "–∫–æ–º–ø–∞–Ω–∏—è: –Ω–∞–∑–≤–∞–Ω–∏–µ"
					/(?:–∫–æ–º–ø–∞–Ω–∏—è|company):\s*([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z\s]+)/i,
					// –§–æ—Ä–º–∞—Ç: "–≤ Google", "–≤ Microsoft"
					/(?:–≤|at)\s+([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z]+)/i,
				];

				for (const companyPattern of companyPatterns) {
					const companyMatch = context.match(companyPattern);
					if (companyMatch && companyMatch[1]) {
						person.company = companyMatch[1].trim();
						break;
					}
				}

				// –ò—â–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
				const descriptionPatterns = [
					// –§–æ—Ä–º–∞—Ç: "‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ"
					/[‚Äî‚Äì-]\s*([^,\n]+(?:[^,\n]*[^,\n])?)/,
					// –§–æ—Ä–º–∞—Ç: ": –æ–ø–∏—Å–∞–Ω–∏–µ"
					/:\s*([^,\n]+(?:[^,\n]*[^,\n])?)/,
					// –§–æ—Ä–º–∞—Ç: "(–æ–ø–∏—Å–∞–Ω–∏–µ)"
					/\(\s*([^)]+)\s*\)/,
					// –§–æ—Ä–º–∞—Ç: ", –æ–ø–∏—Å–∞–Ω–∏–µ"
					/,\s*([^,\n]+(?:[^,\n]*[^,\n])?)/,
				];

				for (const descPattern of descriptionPatterns) {
					const descriptionMatch = context.match(descPattern);
					if (
						descriptionMatch &&
						descriptionMatch[1] &&
						descriptionMatch[1] !== person.role &&
						descriptionMatch[1].length > 10 &&
						!descriptionMatch[1].includes('–≤ ') &&
						!descriptionMatch[1].includes('at ')
					) {
						person.description = descriptionMatch[1].trim();
						break;
					}
				}

				// –ò—â–µ–º —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É/–Ω–∞–≤—ã–∫–∏
				const expertisePatterns = [
					/(?:—ç–∫—Å–ø–µ—Ä—Ç–∏–∑–∞|expertise|–Ω–∞–≤—ã–∫–∏|skills|—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è|specialization):\s*([^,\n]+)/i,
					/(?:–æ–±–ª–∞—Å—Ç—å|area|—Ñ–æ–∫—É—Å|focus):\s*([^,\n]+)/i,
				];

				for (const expPattern of expertisePatterns) {
					const expMatch = context.match(expPattern);
					if (expMatch && expMatch[1]) {
						person.expertise = expMatch[1].split(/[,;]/).map((s) => s.trim());
						break;
					}
				}

				// –ò—â–µ–º –ª–æ–∫–∞—Ü–∏—é
				const locationPatterns = [
					// –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è "based in" –∏–ª–∏ "from"
					/(?:based in|from)\s+([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z\s]+)/i,
					// –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è "–≤ –≥–æ—Ä–æ–¥–µ" –∏–ª–∏ "–∏–∑ –≥–æ—Ä–æ–¥–∞"
					/(?:–≤|–∏–∑)\s+([–ê-–Ø–ÅA-Z][–∞-—è—ëa-z\s]+)/i,
					// –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤
					/(?:–ú–æ—Å–∫–≤–∞|–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥|–ö–∞–∑–∞–Ω—å|–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫|–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥|London|New York|Dubai|Barcelona|Paris|Berlin|Tokyo|Singapore|Amsterdam|Stockholm|Copenhagen|Vienna|Zurich|Frankfurt|Munich|Madrid|Rome|Milan|Lisbon|Dublin|Edinburgh|Glasgow|Manchester|Birmingham|Liverpool|Leeds|Sheffield|Bristol|Newcastle|Cardiff|Belfast|Aberdeen|Dundee|Inverness|Stirling|Perth|Dunfermline|Kirkwall|Lerwick|Stornoway|Lochgilphead|Campbeltown|Rothesay|Millport|Ardrossan|Saltcoats|Stevenston|Kilwinning|Dreghorn|Springside|Bourtreehill|Whitehirst Park|Blacklands|Longbar|Skelmorlie|Wemyss Bay|Inverkip|Gourock|Greenock|Port Glasgow|Langbank|Bishopton|Erskine|Renfrew|Paisley|Johnstone|Kilbarchan|Lochwinnoch|Howwood|Bridge of Weir|Brookfield|Crosslee|Houston|Crosslee|Linwood|Elderslie|Ralston|Glenburn|Foxbar|Gallagher Park|Hunterhill|Meikleriggs|Newmains|Nethercraigs|Seedhill|St Mirin|St James|Stanely|Thornly Park|West End|West Primary|Woodside|Abercorn|Anchor|Ardgowan|Barrhead|Beith|Caldwell|Cartsburn|Castlehead|Clydebank|Corseford|Craigends|Dargavel|Dunlop|Elderslie|Gleniffer|Gryffe|Hawkhead|Howwood|Johnstone|Kilbarchan|Lochwinnoch|Lynedoch|Maxwellton|Meikleriggs|Nethercraigs|Newmains|Paisley|Ralston|Renfrew|Seedhill|Stanely|Thornly Park|West End|Woodside|Abercorn|Anchor|Ardgowan|Barrhead|Beith|Caldwell|Cartsburn|Castlehead|Clydebank|Corseford|Craigends|Dargavel|Dunlop|Elderslie|Gleniffer|Gryffe|Hawkhead|Howwood|Johnstone|Kilbarchan|Lochwinnoch|Lynedoch|Maxwellton|Meikleriggs|Nethercraigs|Newmains|Paisley|Ralston|Renfrew|Seedhill|Stanely|Thornly Park|West End|Woodside)/i,
				];

				for (const locPattern of locationPatterns) {
					const locMatch = context.match(locPattern);
					if (locMatch && locMatch[1]) {
						let location = locMatch[1].trim();
						// –û—á–∏—â–∞–µ–º –ª–æ–∫–∞—Ü–∏—é –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤
						location = location.replace(/\s*\.\s*$/, '');
						location = location.replace(/\s*,\s*$/, '');
						if (location.length > 0 && location.length < 50) {
							person.location = location;
							break;
						}
					}
				}

				people.push(person);
			}
		}

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º lastIndex –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
		pattern.lastIndex = 0;
	});

	console.log('üéØ Final extracted people:', people);
	return people;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –æ–±—â–∏–º —Å–ª–æ–≤–æ–º, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–º–µ–Ω–µ–º
 */
function isCommonWord(str: string): boolean {
	if (!str) return true; // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è –∏–ª–∏ undefined, —Å—á–∏—Ç–∞–µ–º –µ—ë –æ–±—â–∏–º —Å–ª–æ–≤–æ–º
	const commonWords = [
		'–í–æ—Ç',
		'–≤–æ—Ç',
		'Here',
		'here',
		'–°–ø–∏—Å–æ–∫',
		'—Å–ø–∏—Å–æ–∫',
		'List',
		'list',
		'–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã',
		'—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã',
		'Experts',
		'experts',
		'–õ—é–¥–∏',
		'–ª—é–¥–∏',
		'People',
		'people',
		'–†–µ–∫–æ–º–µ–Ω–¥—É—é',
		'—Ä–µ–∫–æ–º–µ–Ω–¥—É—é',
		'Recommend',
		'recommend',
		'–ú–æ–≥—É',
		'–º–æ–≥—É',
		'Can',
		'can',
		'–ü—Ä–µ–¥–ª–∞–≥–∞—é',
		'–ø—Ä–µ–¥–ª–∞–≥–∞—é',
		'Suggest',
		'suggest',
		'–ù–∞–π–¥–µ–Ω–Ω—ã–µ',
		'–Ω–∞–π–¥–µ–Ω–Ω—ã–µ',
		'Found',
		'found',
		'–†–µ–∑—É–ª—å—Ç–∞—Ç—ã',
		'—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
		'Results',
		'results',
		'–ü–æ–∏—Å–∫',
		'–ø–æ–∏—Å–∫',
		'Search',
		'search',
		'–ù–∞–π–¥–µ–Ω–æ',
		'–Ω–∞–π–¥–µ–Ω–æ',
		'Found',
		'found',
		'–°–æ–≤–µ—Ç—É—é',
		'—Å–æ–≤–µ—Ç—É—é',
		'Advise',
		'advise',
		'–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
		'—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
		'Recommendations',
		'recommendations',
		'–ú–æ–∂–µ—Ç–µ',
		'–º–æ–∂–µ—Ç–µ',
		'You can',
		'you can',
		'–°–≤—è–∂–∏—Ç–µ—Å—å',
		'—Å–≤—è–∂–∏—Ç–µ—Å—å',
		'Contact',
		'contact',
		'–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å',
		'–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å',
		'Reach out',
		'reach out',
	];
	return commonWords.includes(str);
}
